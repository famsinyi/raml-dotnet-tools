= RAML Asp.Net Core Api Explorer

:source-highlighter: prettify

:!numbered:

This package is used by the RAML Tools for .NET Visual Studio extension to generate RAML metadata from an existing Asp.Net Core implementation. 

For more info please on the Visual Studio extension refer to the https://github.com/mulesoft-labs/raml-dotnet-tools[RAML Tools for .NET]

Using the extension, right-clicking your project and choosing the *Enable RAML metadata output* command will add a `RamlController`, start up configurations, a razor view and other required files (css, js, etc.).
You will find all these files in the https://github.com/mulesoft-labs/raml-dotnetcore-apiexplorer/tree/develop/RAML.NetCoreApiExplorer/src/package/Content[package] folder.

This package builds on top of https://github.com/aspnet/Mvc/tree/dev/src/Microsoft.AspNetCore.Mvc.ApiExplorer[Microsoft.AspNetCore.Mvc.ApiExplorer]

**Important:** Your Asp.Net Core app must be running to be able to use the ApiExplorer functionality.

== Attribute vs Conventional routing

The entry point is the *ApiExplorerDataFilter* class. This is a resource filter that will take all of your controllers and build a RAML specification out of them.
**Note** that a controller must use *attribute routing* to be able to use the functionality.
If some of your controllers use the conventional routing you will need to avoid the filter to catch this controllers. You can do so by modifying the configuration in the start up.
For example to remove the controller *DefaultRoutingController* from the filter you need to add an *ApiExplorerVisibilityDisabledConvention* specifying the type to the sets of conventions.
This is done with the following line of code:

[source, c#]
----
options.Conventions.Add(new RAML.WebApiExplorer.ApiExplorerVisibilityDisabledConvention(typeof(DefaultRoutingController)));
----

You will need to add it to the *ConfigureServices* method of your *StartUp.cs* class:

[source, c#]
----
    public void ConfigureServices(IServiceCollection services)
    {
        // Add framework services.
        services.AddScoped<MyApiExplorerDataFilter>();
        services.AddMvc(options =>
            {
                options.Filters.AddService(typeof(RAML.WebApiExplorer.ApiExplorerDataFilter));
                options.Conventions.Add(new RAML.WebApiExplorer.ApiExplorerVisibilityEnabledConvention());
				options.Conventions.Add(new RAML.WebApiExplorer.ApiExplorerVisibilityDisabledConvention(typeof(DefaultRoutingController)));
            });
    }
----


== Specifying Response Type in Asp.Net Core

*ResponseTypeStatusAttribute* class is used to specify the response type of a controller's action, associated to a status code.
For example:


[source, c#]
----
        [HttpGet("{id}")]
        [ResponseTypeStatus(typeof(Movie), HttpStatusCode.OK)]
        [ResponseTypeStatus(typeof(NotFoundError), HttpStatusCode.NotFound)]
        public IActionResult Get(int id)
        {
            var movie = Repositories.Movies.FindById(id);
            if (movie == null)
                return NotFound(new NotFoundError("Movie not found", id));

            return Ok(movie);
        }
----


== Customizing the Generated RAML

Some aspects of your API-like security are not automatically detected. You can customize the RAML generation process and further adjust it to your API.

To do this, create a class that inhertis from ApiExplorerDataFilter and override the GetRamlContents method.

[source, c#]
----

   public class MyApiExplorerDataFilter : ApiExplorerDataFilter
    {
        public MyApiExplorerDataFilter(IApiDescriptionGroupCollectionProvider descriptionProvider) : base(descriptionProvider)
        {
        }

        public override RamlDocument GetRamlContents(RAML.WebApiExplorer.ApiExplorerService apiExplorerService)
        {
            // TODO: write your customization code
            return apiExplorerService.GetRaml();
        }
    }
----

Then replace *ApiExplorerDataFilter* on *StartUp.cs* for your class:

[source, c#]
----

    public void ConfigureServices(IServiceCollection services)
    {
        // Add framework services.
        services.AddApplicationInsightsTelemetry(Configuration);
        services.AddScoped<MyApiExplorerDataFilter>();
        services.AddMvc(options =>
        {
            options.Filters.AddService(typeof(MyApiExplorerDataFilter));
            options.Conventions.Add(new RAML.WebApiExplorer.ApiExplorerVisibilityEnabledConvention());
            options.Conventions.Add(new RAML.WebApiExplorer.ApiExplorerVisibilityDisabledConvention(typeof(RAML.WebApiExplorer.RamlController)));
        });
    }
----

You can set the security schemes of your API, this is an example for OAuth v2.
First it creates a *SecuritySchemeDescriptor* where you can set the query parameters, headers, and responses.
In this case it defines a single query parameter called "access_token".

Then it calls the *UseOAuth2* method, which sets the endpoints, grants, scopes, and the previously created security scheme descriptor.

In this example the authorization URL is `/oauth/authorize`, the access token URL is `/oauth/access_token`.
There are two authorization grants *code* and *token*, and a single scope *all*.

[source, c#]
----
    // Set OAuth security scheme descriptor:  headers, query parameters, and responses
    var descriptor = new SecuritySchemeDescriptor
    {
        QueryParameters = new Dictionary<string, Parameter>
          {
              {
                  "access_token",
                  new Parameter
                  {
                      Type = "string",
                      Required = true
                  }
              }
          }
    };

    // Set OAuth v2 endpoints, grants, scopes and descriptor
    apiExplorerService.UseOAuth2("/oauth/authorize", "/oauth/access_token",
                new[] {"code", "token"}, new[] {"all"}, descriptor);

----

You can set the protocols for the web API by setting the *Protocols* property of the ApiExplorerService instance.
For example for using HTTPS only in all of your API you would do this:

[source, c#]
----
    apiExplorerService.Protocols = new[] { Protocol.HTTPS };
----

In a similar fashion if you want to set all of your resources to be accessed with OAuth v2, you can set the *SecuredBy* property of the ApiExplorerService instance.

[source, c#]
----
    apiExplorerService.SecuredBy = new[] { "oauth_2_0" };
----

Combining all this together, your code should look like this:

[source, c#]
----

   public class MyApiExplorerDataFilter : ApiExplorerDataFilter
    {
        public MyApiExplorerDataFilter(IApiDescriptionGroupCollectionProvider descriptionProvider) : base(descriptionProvider)
        {
        }

        public override RamlDocument GetRamlContents(RAML.WebApiExplorer.ApiExplorerService apiExplorerService)
        {
            // Use HTTPS only
            apiExplorerService.Protocols = new[] { Protocol.HTTPS };

            // Use OAuth 2 for all resources
            apiExplorerService.SecuredBy = new[] { "oauth_2_0" };

            // Set OAuth security scheme descriptor: headers, query parameters, and responses
            var descriptor = new SecuritySchemeDescriptor
            {
                QueryParameters = new Dictionary<string, Parameter>
                {
                    {
                        "access_token",
                        new Parameter
                        {
                            Type = "string",
                            Required = true
                        }
                    }
                }
            };

            // Set OAuth v2 endpoints, grants, scopes, and descriptor
            apiExplorerService.UseOAuth2("https://api.movies.com/oauth/authorize",
                "https://api.movies.com/oauth/access_token", new[] { "code", "token" }, new[] { "all" }, descriptor);
            var ramlDocument = apiExplorerService.GetRaml();
            return ramlDocument;
        }
    }
----

If using OAuth v1, you can use the *UseOAuth1* method. For other security schemes or further customization, you can use the *SetSecurityScheme* method or the *SecuritySchemes* property.

Other global properties can be set using the *SetRamlProperties* action.
For example, to set the root level documentation:

[source, c#]
----
    apiExplorerService.SetRamlProperties = raml =>
        {
            raml.Documentation = "Documentation is availabe at http://documentation.org"
        }
----

For customizing your RAML only for specific resources, you have three action available: *SetMethodProperties*, *SetResourceProperties*, *SetResourcePropertiesByAction*, and *SetResourcePropertiesByController*.

For example for setting OAuth v2 for the movies POST action, you can do this:

[source, c#]
----
apiExplorerService.SetMethodProperties = (apiDescription, method) =>
    {
      if (apiDescription.RelativePath == "movies" && method.Verb == "post")
        {
            method.SecuredBy = new [] {"oauth_2_0"};
        }

    };
----

You can also modify the Body or the Responses using the same strategy.
