def openCover = "%WORKSPACE%\\src\\tools\\packages\\OpenCover.4.7.922\\tools\\OpenCover.Console.exe"
def nunitRunner = "%WORKSPACE%\\src\\tools\\packages\\NUnit.ConsoleRunner.3.10.0\\tools\\nunit3-console.exe"

def niqHome= "c:/cp/"
def iqUrl ="http://nexus-iq-0:8070"
def appId="dotnet-tools"
def iqCmd = "java -jar ${niqHome}/nexus-iq-cli.jar -s ${iqUrl} -i ${appId}"

pipeline {

    environment {
        NUGET_CREDS = credentials('jenkins-amf-net.service')
    }
    agent {
        node {
            label 'windows10'
            customWorkspace 'c:\\cp'
        }
    }
    stages {
        stage('AMF.Api.Core')
        {
            stages {
                stage('Build') {
                    steps {
                        bat 'nuget restore src/apicore/src/AMF.Api.Core.sln'
                        bat "msbuild src/apicore/src/AMF.Api.Core.sln /p:Configuration=Release /p:Platform=\"Any CPU\""
                    }
                }
                stage('Test') {
                    steps {
                        bat 'nunit3-console.exe "%WORKSPACE%\\src\\apicore\\src\\RAML.Api.Core.Tests\\bin\\Release\\AMF.API.Core.Tests.dll" --result=TestApiCore.xml'
                    }
                }
                stage('Coverage'){
                    steps {
                        dir("src\\apicore\\src\\RAML.Api.Core.Tests\\bin\\Release\\") {
                            bat "\"../../../packages/OpenCover.4.7.922/tools/OpenCover.Console.exe\" -target:\"../../../packages/NUnit.ConsoleRunner.3.10.0/tools/nunit3-console.exe\" -targetArgs:AMF.Api.Core.Tests.dll -register"
                        }
                    }
                }
                stage('Pack') {
                    steps {
                        bat 'nuget pack src/apicore/src/RAML.API.Core/AMF.Api.Core.csproj -Prop Configuration=Release'
                        withCredentials([string(credentialsId: 'AMF-Net-NugetKey', variable: 'NugetApiKey')]) {
                            bat "nuget push *.nupkg -source https://nexus.dev.build.msap.io/nexus/service/local/nuget/NuGet/ $NugetApiKey"
                        }
                    }
                }
            }
        }

        stage('RAML.Parser.Model')
        {
            stages {
                stage('Build') {
                    steps {
                        bat "msbuild src/raml/Raml.Parser.Model.sln /p:Configuration=Release /p:Platform=\"Any CPU\""
                    }
                }
                stage('Pack') {
                    steps {
                        bat 'nuget pack src/raml/RAML.Parser.Model/RAML.Parser.Model.csproj -Prop Configuration=Release'
                        withCredentials([string(credentialsId: 'AMF-Net-NugetKey', variable: 'NexusNugetApiKey')]) {
                            bat "nuget push *.nupkg -source https://nexus.dev.build.msap.io/nexus/service/local/nuget/NuGet/ $NexusNugetApiKey"
                        }
                    }
                }
            }
        }

        stage('AMF.NetCore.APICore'){
            stages{
                stage('Build'){
                    steps {
                        bat "dotnet restore src/core-apicore/AMF.NetCore.APICore.sln"
                        bat "dotnet build src/core-apicore/src/AMF.NetCore.APICore/AMF.NetCore.APICore.csproj"
                        bat "dotnet build src/core-apicore/src/AMF.NetCore.APICore.Tests/AMF.NetCore.APICore.Tests.csproj"
                    }
                }
                stage('Pack'){
                    steps {
                        bat "dotnet pack src/core-apicore/src/AMF.NetCore.APICore/AMF.NetCore.APICore.csproj"
                        withCredentials([string(credentialsId: 'AMF-Net-NugetKey', variable: 'NugetApiKey')]) {
                            bat "nuget push *.nupkg -source https://nexus.dev.build.msap.io/nexus/service/local/nuget/NuGet/ $NugetApiKey"
                        }
                    }
                }
            }
        }

        stage('AMF.ApiExplorer')
        {
            stages {
                stage('Build') {
                    steps {
                        bat 'nuget restore src/apiexplorer/src/AMF.WebApiExplorer.sln'
                        bat "msbuild src/apiexplorer/src/AMF.WebApiExplorer.sln /p:Configuration=Release /p:Platform=\"Any CPU\""
                    }
                }
                stage('Test') {
                    steps {
                        bat 'nunit3-console.exe "%WORKSPACE%\\src\\apiexplorer\\src\\AMF.WebApiExplorer.Tests\\bin\\Release\\AMF.WebApiExplorer.Tests.dll" --result=TestWebApiExplorer.xml'
                    }
                }
                stage('Pack') {
                    steps {
                        bat 'nuget pack src/apiexplorer/src/AMF.WebApiExplorer/AMF.WebApiExplorer.csproj -Prop Configuration=Release'
                        withCredentials([string(credentialsId: 'AMF-Net-NugetKey', variable: 'NugetApiKey')]) {
                            bat "nuget push *.nupkg -source https://nexus.dev.build.msap.io/nexus/service/local/nuget/NuGet/ $NugetApiKey"
                        }
                    }
                }
            }
        }

        stage('AMF.NetCore.ApiExplorer'){
            stages{
                stage('Build'){
                    steps {
                        bat "dotnet restore src/core-apiexplorer/AMF.NetCoreAPIExplorer.sln"
                        bat "dotnet build src/core-apiexplorer/src/AMF.NetCoreAPIExplorer/AMF.NetCoreAPIExplorer.csproj"
                        bat "dotnet build src/core-apiexplorer/src/AMF.NetCoreAPIExplorer.Tests/AMF.NetCoreAPIExplorer.Tests.csproj"
                    }
                }
                stage('Test'){
                    steps{
                        bat 'dotnet test src/core-apiexplorer/src/AMF.NetCoreApiExplorer.Tests/AMF.NetCoreApiExplorer.Tests.csproj'
                    }
                }
                stage('Pack'){
                    steps {
                        bat "dotnet pack src/core-apiexplorer/src/RAML.Parser.Expressions/RAML.Parser.Expressions.csproj"
                        bat "dotnet pack src/core-apiexplorer/src/AMF.NetCoreAPIExplorer/AMF.NetCoreAPIExplorer.csproj"
                        withCredentials([string(credentialsId: 'AMF-Net-NugetKey', variable: 'NugetApiKey')]) {
                            bat "nuget push *.nupkg -source https://nexus.dev.build.msap.io/nexus/service/local/nuget/NuGet/ $NugetApiKey"
                        }
                    }
                }
                // stage ("Nexus IQ") {
                //     steps {
                //         // nexusIQScan("dotnet-tools", "http://nexus-iq-0:8070", "src/core-apiexplorer/src/AMF.NetCoreApiExplorer/bin/Release/RAML.Parser.Expressions.nupkg")
                //         nexusIQScan("dotnet-tools", "http://nexus-iq-0:8070", "src/core-apiexplorer/src/AMF.NetCoreApiExplorer/bin/Release/AMF.NetCoreAPIExplorer.nupkg")
                //     }
                // }
            }
        }

        stage('AMF.Tools')
        {
            stages {
                stage('Build') {
                    steps {
                        script {
                            try {
                                // bat 'nuget sources remove -Name nexus'
                                bat "nuget sources add -Name nexus -Source https://nexus.dev.build.msap.io/nexus/service/local/nuget/NuGet/ -UserName $NUGET_CREDS_USR -Password $NUGET_CREDS_PSW -StorePasswordInClearText"
                            }
                            catch (err) {
                                // ignore already present source error
                                echo err.getMessage()
                            }
                        }
                        bat 'nuget restore src/tools/AMF.Tools.sln'
                        bat "msbuild src/tools/AMF.Tools.sln /p:Configuration=Release /p:Platform=\"Any CPU\" /p:DeployExtension=false"
                    }
                }
                stage('Test') {
                    steps {
                        dir("src/tools/AMF.Tools.TestRunner/bin/Release/"){
                            bat 'AMF.Tools.TestRunner.exe'
                        }
                        // bat 'nunit3-console.exe "%WORKSPACE%\\src\\tools\\AMF.Tools.Tests\\bin\\Release\\AMF.Tools.Tests.dll" --result=Testtools.xml'
                    }
                }
                stage('Coverage'){
                    steps {
                        bat "mkdir toolscoverage"
                        dir("src/tools/AMF.Tools.TestRunner/bin/Release/"){
                            bat "\"${openCover}\" -target:AMF.Tools.TestRunner.exe -register"
                            bat "\"../../../packages/ReportGenerator.4.3.2/tools/net47/ReportGenerator.exe\" -reports:results.xml -targetdir:%WORKSPACE%\\toolscoverage"
                        }
                        zip zipFile: 'toolscoverage.zip', dir: 'toolscoverage', archive: true
                    }
                }
                stage ("Nexus IQ") {
                    steps {
                        echo "Starting NexusIQ scan for appId ${appId} against scan.zip"
                        bat "powershell -Command \"& {Invoke-WebRequest -OutFile nexus-iq-cli.jar https://download.sonatype.com/clm/scanner/nexus-iq-cli-1.49.0-01.jar;}\""
                        sh "mkdir scan"
                        bat "cp -a src/tools/AMF.Tools/*.cs scan/"
                        bat "cp -a src/tools/AMF.Tools/*.csproj scan/"
                        bat "cp -a src/tools/AMF.Tools/*.config scan/"
                        bat "cp -a *.nupkg scan/"
                        zip zipFile: 'scan.zip', dir: 'scan', archive: true
                        script {
                            try {
                                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                                    credentialsId: 'nexus-iq',
                                    passwordVariable: 'IQ_PASSWORD',
                                    usernameVariable: 'IQ_USERNAME']]) {
                                        sh "${iqCmd} -a ${env.IQ_USERNAME}:${env.IQ_PASSWORD} scan.zip"
                                }//withCredential 
                            }//try
                            catch(err) {
                                        echo "Nexus IQ Scan Failed: ${err}"
                                        if (ignoreErrors == false || failOnVulnerabilities == true)
                                            throw err
                            }//catch
                        }//script
                    }//steps
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts 'src/tools/AMF.Tools/bin/Release/*.vsix'
            archiveArtifacts '*.nupkg'
            archiveArtifacts 'src/core-apicore/src/AMF.NetCore.APICore/bin/Debug/*.nupkg'
            archiveArtifacts 'src/core-apiexplorer/src/AMF.NetCoreApiExplorer/bin/Debug/*.nupkg'
            nunit testResultsPattern: '*.xml'
        }
        cleanup {
            cleanWs()
        }
    }
}
