#%RAML 1.0
baseUri: https://mocksvc.mulesoft.com/mocks/10719a4c-55fa-4a05-af87-227de615ce69 # baseUri: https://mocksvc.mulesoft.com/mocks/c79016a5-2d4c-454f-a87c-1088bdf5dbfa # 
title: Retail_Partners_System_API
version: v2.0

uses:
  common: /exchange_modules/org.mule.templates/retail-common/1.0.0/retail_common.raml
  partner: /exchange_modules/org.mule.templates/retail-partner/1.0.0/retail_partner.raml
  inventory: /exchange_modules/org.mule.templates/retail-inventory/1.0.0/retail_inventory.raml

traits: 
  productSearch: !include /traits/productSearch.raml
      
types:

  SearchCriteria:
    type: object
    properties: 
      name?: 
        type: string?
        description: product name
      productId?: 
        type: string?
        description: identifier of product
      variantId?: 
        type: string?
        description: identifier of variant
      quantity?: 
        type: integer
        description: Count of reserved product

  ItemAvailabilityResponse:
    type: object
    properties: 
      searchCriteria: SearchCriteria
      results: inventory.PartnerAvailabilityData[]

  PartnerSearchResponse:
    type: object
    properties:
      searchCriteria: SearchCriteria
      results: partner.PartnerInfo[]
    
  Reservation: 
    type: object
    properties:
      productId: 
        type: string
        description: identifier of product
      variantId: 
        type: string
        description: identifier of variant
      customerId: 
        type: string
        description: identifier of customer
      quantity: 
        type: integer
        description: Count of reserved product
      partnerId: 
        type: string
        description: identifier of partner
      name?: 
        type: string
        description: name of product
      price?: 
        type: number
        description: number of money
      address?: 
        type: common.PostalAddress
      
/partners:
  get:
    displayName: Retrieve partners
    queryParameters: 
      name: 
        type: string
        required: false
        description: |
          Partner name
    responses: 
      200:
        body:
          application/json:
            type: PartnerSearchResponse
            example: !include examples/partner-search-response.json
  post:
    displayName: Create partner
    description: creates new Partner record
    body: 
      application/json:
        type: partner.PartnerInfo
        example: !include examples/create-partner-request.json
    responses: 
      201:
        headers: 
          Location:
        body: 
          application/json:
            type: partner.PartnerInfo
            example: !include examples/partner-response.json
  
  /{partnerId}:
    uriParameters: 
      partnerId: 
        description: Partner identifier
    get:
      displayName: Retrieve partner info
      description: |
        Retrieve info about particular partner (address, name, etc.)
      responses: 
        200:
          body: 
            application/json:
              type: partner.PartnerInfo
              example: !include examples/partner-response.json
              
    put:
      displayName: Update partner
      description: | 
        Updates information about particular partner
      body: 
        application/json:
          type: partner.PartnerInfo
          example: !include examples/partner-response.json
      responses: 
        200:
          body: 
            application/json:
              type: partner.PartnerInfo
              example: !include examples/partner-response.json
      
/productSearch:
  get: 
    displayName: Search product
    description: |
      Searches for a product identified by productId and variantId. If quantity is provided as search parameter, only partners that have required number of items in stock are included in the response.
    is: [ productSearch ]
    responses: 
      200:
        body: 
          application/json:
            type: ItemAvailabilityResponse
            example: !include examples/product-search-response.json
            
            
/reservation:
  post:
    displayName: Create reservation
    description: reservation of product
    body: 
      application/json:
        type: Reservation
        example: !include examples/product-reserve-request.json
    responses: 
      201: 
        body: 
          application/json: 
            example: |
              {
                "message": "Product was reserved" 
              } 