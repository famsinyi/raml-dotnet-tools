<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(binDir)AMF.Tools.Core.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="AMF.Tools.Core" #>
<#@ import namespace="AMF.Tools.Core.WebApiGenerator" #>
<#@ import namespace="System.Linq" #>
<#@ parameter name="controllerObject" type="AMF.Tools.Core.WebApiGenerator.ControllerObject" #>
<#@ parameter name="hasModels" type="System.Boolean" #>
<#@ parameter name="useAsyncMethods" type="System.Boolean" #>
<#@ parameter name="apiVersion" type="System.String" #>
<#@ parameter name="testsNamespace" type="System.String" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Http.Results;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using $(namespace);
<# if(hasModels){ #>
using $(namespace).Models;
<# } #>

// Do not modify this file. This code was generated by AMF Tests Scaffolder

namespace <#= testsNamespace #>
{
    
<# if(System.String.IsNullOrWhiteSpace(apiVersion)) { #>
	[TestClass]
    public partial class <#= controllerObject.Name #>ControllerTests
    {
        protected <#= controllerObject.Name #>Controller controller = new <#= controllerObject.Name #>Controller();
        protected <#= controllerObject.Name #>ControllerTestsImplementation implementation = new <#= controllerObject.Name #>ControllerTestsImplementation();
<# } else { #>
    public class <#= apiVersion #><#= controllerObject.Name #>ControllerTests
    {
        protected <#= apiVersion #><#= controllerObject.Name #>Controller controller = new <#= apiVersion #><#= controllerObject.Name #>Controller();
        protected <#= apiVersion #><#= controllerObject.Name #>ControllerTestsImplementation implementation = new <#= apiVersion #><#= controllerObject.Name #>ControllerTestsImplementation();
<# } #>

<#
		foreach (var method in controllerObject.Methods)
		{
#>

        // Do not modify this code
		[TestMethod]
<# if(useAsyncMethods) { #>
        public virtual async Task <#= method.Name #>Test()
<# } else { #>
        public virtual void <#= method.Name #>Test()
<# } #>
		{
            // Arrange
            implementation.<#= method.Name #>Arrange(controller);

            // Act
<# if(!string.IsNullOrWhiteSpace(method.ParametersStringForAspNet5)) { #>
			<#= method.ParametersDefinitionAspNetCore #>
<# } #>
<# 
if(useAsyncMethods) { #>
            var result = await controller.<#= method.Name #>(<#= method.ParametersCallString #>);
<# } else { #>
            var result = controller.<#= method.Name #>(<#= method.ParametersCallString #>);
<# } #>

            // Assert
<#
if (method.ReturnType != null && method.ReturnType != "string" && method.OkConcreteType != null)
{
#>
            Assert.IsInstanceOfType(result, typeof(OkNegotiatedContentResult<<#= method.OkConcreteType #>>));
<#  } #>
            implementation.<#= method.Name #>Assert(result);
        }
<#
		} // end foreach method
#>
    }
}