<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(binDir)AMF.Tools.Core.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="AMF.Tools.Core" #>
<#@ import namespace="AMF.Tools.Core.WebApiGenerator" #>
<#@ import namespace="System.Linq" #>
<#@ parameter name="controllerObject" type="AMF.Tools.Core.WebApiGenerator.ControllerObject" #>
<#@ parameter name="hasModels" type="System.Boolean" #>
<#@ parameter name="useAsyncMethods" type="System.Boolean" #>
<#@ parameter name="apiVersion" type="System.String" #>
<#@ parameter name="modelsNamespace" type="System.String" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
<# if(hasModels){ #>
using <#= modelsNamespace #>;
<# } #>

// Do not modify this file. This code was generated by AMF Server Scaffolder

namespace $(namespace)
{
<# if(System.String.IsNullOrWhiteSpace(apiVersion)) { #>
    [Route("<#= controllerObject.PrefixUri #>")]
    public partial class <#= controllerObject.Name #>Controller : Controller
<# } else { #>
    [Route("<#= apiVersion #>/<#= controllerObject.PrefixUri #>")]
    public partial class <#= apiVersion #><#= controllerObject.Name #>Controller : Controller
<# } #>
    {

<#
		foreach (var method in controllerObject.Methods)
		{
#>

<#= method.XmlComment ?? string.Empty #>
        [Http<#= method.Verb #><#= string.IsNullOrWhiteSpace(method.Url) ? "" : "(\"" + method.Url + "\")" #>]
<# if(useAsyncMethods) { #>
        public virtual async Task<IActionResult> <#= method.Name #>Base(<#= method.ParametersStringForAspNet5 #>)
<# } else { #>
        public virtual IActionResult <#= method.Name #>Base(<#= method.ParametersStringForAspNet5 #>)
<# } #>
        {
            // Do not modify this code
            <# if(System.String.IsNullOrWhiteSpace(apiVersion)) { #>
            return <#= useAsyncMethods ? "await" : "" #> ((I<#= controllerObject.Name #>Controller)this).<#= method.Name #>(<#= method.ParametersCallString #>);
            <# } else { #>
            return <#= useAsyncMethods ? "await" : "" #> ((I<#= apiVersion #><#= controllerObject.Name #>Controller)this).<#= method.Name #>(<#= method.ParametersCallString #>);
            <# } #>
        }
<#

		}
#>
    }
}