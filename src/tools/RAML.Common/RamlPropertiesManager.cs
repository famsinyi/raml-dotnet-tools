using System;
using System.IO;

namespace AMF.Common
{
    public class RamlPropertiesManager
    {
        public static string BuildContent(RamlProperties properties)
        {
            var source = string.Empty;
            if (properties.Source != null && properties.Source.StartsWith("http")) // only store source if is from web (i.e.: an URL)
                source = properties.Source;

            var content = string.Format("// do not edit this file{0}source: {1}{0}namespace: {2}{0}",
                Environment.NewLine, source, properties.Namespace);

            if (!string.IsNullOrWhiteSpace(properties.ClientName))
                content += string.Format("client: {0}{1}", properties.ClientName, Environment.NewLine);

            if (!string.IsNullOrWhiteSpace(properties.ClientName)) 
                return content;

            // Server only properties
            content += string.Format("async: {0}{1}", properties.UseAsyncMethods ?? false, Environment.NewLine);

            content += string.Format("includeApiVersionInRoutePrefix: {0}{1}",
                properties.IncludeApiVersionInRoutePrefix ?? false, Environment.NewLine);

            content += string.Format("modelsFolder: {0}{1}", properties.ModelsFolder ?? string.Empty,
                Environment.NewLine);

            content += string.Format("implementationControllersFolder: {0}{1}",
                properties.ImplementationControllersFolder ?? string.Empty, Environment.NewLine);

            content += string.Format("addGeneratedSuffix: {0}{1}", properties.AddGeneratedSuffix ?? false,
                Environment.NewLine);
            return content;
        }

        public static RamlProperties Load(string refFilePath)
        {
            return new RamlProperties
            {
                Namespace = RamlReferenceReader.GetRamlNamespace(refFilePath),
                Source = RamlReferenceReader.GetRamlSource(refFilePath),
                ClientName = RamlReferenceReader.GetClientRootClassName(refFilePath),
                UseAsyncMethods = RamlReferenceReader.GetRamlUseAsyncMethods(refFilePath),
                IncludeApiVersionInRoutePrefix = RamlReferenceReader.GetRamlIncludeApiVersionInRoutePrefix(refFilePath),
                AddGeneratedSuffix = RamlReferenceReader.GetAddGeneratedSuffix(refFilePath),
                ModelsFolder = RamlReferenceReader.GetModelsFolder(refFilePath),
                ImplementationControllersFolder = RamlReferenceReader.GetImplementationControllersFolder(refFilePath)
            };
        }

        public static void Save(RamlProperties props, string refFilePath)
        {
            var contents = BuildContent(props);
            var fileInfo = new FileInfo(refFilePath) { IsReadOnly = false };
            File.WriteAllText(refFilePath, contents);
            fileInfo.IsReadOnly = true;
        }

    }
}