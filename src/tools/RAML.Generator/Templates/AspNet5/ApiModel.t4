<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(binDir)AMF.Tools.Core.dll" #>
<#@ import namespace="AMF.Tools.Core" #>
<#@ import namespace="AMF.Tools.Core.WebApiGenerator" #>
<#@ parameter name="apiObject" type="AMF.Tools.Core.ApiObject" #>
<#@ output extension=".cs" #>

// This code was generated by RAML Web Api 2 Scaffolder

<#
if (!string.IsNullOrWhiteSpace(apiObject.GeneratedCode))
{
#>
<#= apiObject.GeneratedCode #>
<#
} else {
#>
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace $(namespace).Models
{
<#
	if (!string.IsNullOrWhiteSpace(apiObject.Description))
	{
#>
    /// <summary>
    /// <#= XmlCommentHelper.Escape(apiObject.Description) #>
    /// </summary>
<#
	}

	if(!apiObject.IsMultiple && !string.IsNullOrWhiteSpace(apiObject.BaseClass)) 
	{
#>
    public partial class <#= apiObject.Name #> <#= " : " +  apiObject.BaseClass #>
<#
	} else {
#>
    public partial class <#= apiObject.Name #>
<#
	}
#>
    {
        
<#
	foreach (var property in apiObject.Properties)
	{
        if(property == null || property.Type == null || property.Name == null)
            continue;

    // this if a whitespace line to separate properties, do not delete !
#>

<#
	    if (!string.IsNullOrWhiteSpace(property.Description))
	    {
#>
        /// <summary>
        /// <#= XmlCommentHelper.Escape(property.Description) #>
        /// </summary>
<#
	    }
#>
<#= property.CustomAttributes #>
<#
        if(property.IsAdditionalProperties)
        {
#>
        [JsonExtensionData]
<#
        }		
		if(!string.IsNullOrWhiteSpace(property.OriginalName) && property.OriginalName != property.Name)
		{
#>
		[JsonProperty("<#= property.OriginalName #>")]
<#		}
		if(property.IsEnum)
		{
#>
		[JsonConverter(typeof(StringEnumConverter))]
<#		} #>
        public <#= property.Type #> <#= property.Name #> { get; set; }
<#
	}
#>
    } // end class

} // end Models namespace

<# } #>