def date = new Date()
def datefolder = date.format("%Y-%m-%d")

pipeline {

    agent {
        node {
            label 'code-sigining-hsm'
            customWorkspace 'c:\\cp'
        }
    }
    stages {
        stage('Build') {
            steps {
                bat "git clone https://github.com/mulesoft-labs/raml-dotnet-tools.git"
                bat "git checkout master"
                bat 'nuget restore src/tools/RAML.Tools.sln'
                bat "msbuild src/tools/RAML.Tools.sln /p:Configuration=Release /p:Platform=\"Any CPU\" /p:DeployExtension=false"
            }
        }
        stage('Test') {
            steps {
                dir("src/tools/RAML.Tools.TestRunner/bin/Release/"){
                    bat 'RAML.Tools.TestRunner.exe'
                }
            }
        }
        stage('Sing Vsix') {
            steps {
                withCredentials([string(credentialsId: 'amf_codesign_cert_thumbprint', variable: 'THUMBPRINT')]) {
                    bat "OpenVsixSignTool.exe sign --sha1 $THUMBPRINT --timestamp http://timestamp.digicert.com -ta sha256 -fd sha256 src/tools/RAML.Tools/bin/Release/RAML.Tools.vsix"
                    //bat "'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool.exe' sign /v /fd sha256 /sha1 $THUMBPRINT /sm src/tools/RAML.Tools/bin/Release/RAML.Tools.vsix"
                }
            }
        }
        stage('Deploy to public nexus') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'nexus-public', passwordVariable: 'PUBLIC_NEXUS_PASS', usernameVariable: 'PUBLIC_NEXUS_USER']]) {

                    nexusArtifactUploader artifactId: 'RAML.Tools', classifier: 'release', file: './src/tools/RAML.Tools/bin/Release/RAML.Tools.vsix', type: 'vsix', groupId: 'dotnet', nexusUrl: 'repository-master.mulesoft.org/nexus', credentialsId: 'nexus-public', nexusPassword: "${PUBLIC_NEXUS_PASS}", nexusUser: "${PUBLIC_NEXUS_USER}", nexusVersion: 'nexus2', protocol: 'https', repository: 'releases', version: '3.0.2'
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts 'src/tools/RAML.Tools/bin/Release/*.vsix'
        }
        cleanup {
            cleanWs()
        }
    }
}
