== Implementing an ASP.NET Core Web Application

To implement an ASP.NET Core web app:

. Start Visual Studio and create a new ASP.NET Core Web Application.
. In the New ASP.NET Project menu, select a template:
+
image::./docimages/webapi-vs2015.png[align="center", width="550"]
+
. In the Solution Explorer, right-click the project node and click the *Add RAML/OAS Contract* command.
+
image::./docimages/RAML_NETAddRAMLContract.png[align="center", width="550"]
+
. The dialog lets you create a RAML definition or import a RAML or OAS existing specification. If you import an existing one, click  the *Go* button to download the RAML/OAS definition from an URL, browse to use a local copy from your file system or select from Exchange.

The preview screen has several options to customize the generated code. You can change the filename, namespace, or choose asynchronous methods.

You can choose to generate unit tests for the actions of the generated controllers. To do so check the "Genera Unit Tests" checkbox and select your unit test project. Is important to note that *you need to create the unit testing project first*, before adding the raml contract. The tests are aimed for the https://github.com/microsoft/testfx[MSTest Framework].

Also you can customize the location of the generated classes. Check the "Customize output folders" and enter the path for the controllers and/or the models. 
Select the check box if you want to add "generated.cs" to the model filenames.

A Contracts folder is added to the project containing the generated assets. These assets include a local copy of the RAML/OAS definition, the generated model classes (inferred from the RAML types or JSON schemas in the RAML/OAS definition), and .NET interfaces representing the contracts for the ASP.NET Controllers.

If you want to customize the location of the generated classes, select the "Customize output folders", specify the paths, and choose if you want to add ".generated.cs" suffix to the Models. **Specified paths will be relative to the project's root folder**.
If you leave these fields empty, it will place the generated controllers in the "Controllers" folder and the rest of the assets under the Contracts folder.

If you plan to host several versions of the API in the same solution, you can check the "Use api version" option. 
This will add the version as a prefix to routes, controllers, and models, thus preventing collision between different versions of the API.

image::docimages/RAML_NETAddRAMLContractScreen.png[align="center", width=550]


link:README.asciidoc[Return to Documentation Index]

=== More info

- link:CustomizingCodeGeneration.asciidoc[Customizing the Code Generation]

- link:Exchange.asciidoc[Retrieving your specifications from Anypoint Exchange]

- link:PrimitiveTypes.asciidoc[Fine tuning generated .NET primitive types]