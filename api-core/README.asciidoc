= RAML API Core

:source-highlighter: prettify

:!numbered:

These are support classes for the Visual Studio extension https://github.com/mulesoft-labs/raml-dotnet-tools[RAML Tools for .NET].

These classes are used in the generated code and also in the RAML extraction process from an ASP.Net Web Api app.
The nuget package is installed into the user project when adding a RAML contract, generating a client proxy or enabling RAML metadata from the Visual Studio extension.

== Client Proxy Classes

When adding a RAML Reference the Visual Studio Extension will generate a client proxy which uses classes contained in this package like ApiRequest, ApiResponse and SchemaValidation to name the more important ones.


=== Handling the Request

The ApiRequest class gives access to the Headers of the request.

[source, c#]
----
    var req = new ApiRequest();
    req.RawHeaders.Add("header1", "value");
----

This class is also used when a type was specified in the RAML as the base class for generated typed request.


=== Handling the response

The ApiResponse class provides the base behavoiur for a response, including the status code, and message of the response, the schema validation logic, the raw headers and content and a collection of formatters for the response.

[source, c#]
----
    public class ApiResponse
    {
        public HttpStatusCode StatusCode { get; set; }
        public string ReasonPhrase { get; set; }
        public Lazy<SchemaValidationResults> SchemaValidation { get; set; }



        public HttpResponseHeaders RawHeaders { get; set; }
        public HttpContent RawContent { get; set; }
        public IEnumerable<MediaTypeFormatter> Formatters { get; set; }
    }
----

All methods in the generated class return an instance of ApiResponse or of a subclass of it. This class provides access to the HTTP status codes, raw headers, and content. The following code fragment illustrates how to use those:

[source, c#]
----
var statusCode = response.StatusCode;
var rawHeaders = response.RawHeaders;
var rawContent = response.RawContent;
var stream = await response.RawContent.ReadAsStreamAsync();
----

When the RAML specifies a JSON contract for a response, the tool generates a strongly typed object with an equivalent structure. This object is accessible through the Content property in the response.

[source, c#]
----
var moviesResponse = await api.Movies.Get();
MoviesGetOKResponseContent[] movies = moviesResponse.Content;
var director = movies.First().Director;
----

For more advanced scenarios in which several JSON schemas are associated with a response, the Content property provides a different typed object for each schema.

[source, c#]
----
var okContent = movieResponse.Content.IdGetOKResponseContent;
var badReqContent = movieResponse.Content.IdGetBadRequestResponseContent;
var notFoundContent = movieResponse.Content.IdGetNotFoundResponseContent;
----

Depending on the HTTP status code, each property has a value or is null. For example, if the status code is OK (200), only the IdGetOKResponseContent  has a value, and the other properties are null.

The response also provides access to typed headers in case they were included in the RAML definition:

[source, c#]
----
GetByIdMoviesOKResponseHeader headers = movieResponse.Headers;
var created = headers.Created;
var code = headers.Code;
----


=== Schema validation

*SchemaValidationSettings* class provides a mean for enabling or disabling the validation by setting the *Enabled* property.
And to choose between raising or not exceptions when the validation fails by setting the *RaiseExceptions* property.

If the validation is enabled and the exceptions disabled we will obtain a validation result.
The *SchemaValidationResults* contains an *IsValid* property and a list of *Errors* for when it fails.

[source, c#]
----
var client = new MoviesClient("http://movies.com/api/");

// Enable validation, disable raise exceptions
client.SchemaValidation.Enabled = true;
client.SchemaValidation.RaiseExceptions = false;

// GET /movies
var response = await client.Movies.Get();

// check if the validates and get the errors if not
if (response.SchemaValidation.IsValueCreated && !response.SchemaValidation.Value.IsValid)
    IList<string> errors = response.SchemaValidation.Value.Errors;
...
----


== RAML extraction classes

=== Specifying Response Type in WebApi

*ResponseTypeAttribute* class is used to specify the main response type of a controller's action.
For example:

[source, c#]
----
        [HttpGet("{id}")]
        [ResponseType(typeof(Movie)]
        public IActionResult Get(int id)
        {
            var movie = Repositories.Movies.FindById(id);
            return Ok(movie);
        }
----


For more info about the RAML Tools Visual Studio extension, please refer to the https://github.com/mulesoft-labs/raml-dotnet-tools[RAML Tools for .NET]
