== Implementing an ASP.NET Web API Application

To implement an ASP.NET Web API:

. Start Visual Studio and create a new ASP.NET Web project.
. In the New ASP.NET Project menu, click *Web API*:
+
image::./docimages/RAML_NET_NewASPProject.png[align="center", width="550"]
+
. In the Solution Explorer, right-click the project node and click the *Add RAML/OAS Contract* command.
+
image::./docimages/RAML_NETAddRAMLContract.png[align="center", width="550"]
+
. The dialog lets you create a RAML definition or import an existing RAML or OAS specification. If you import an existing one, click  the *Go* button to download the RAML/OAS definition from an URL, browse to use a local copy from your file system or choose one from Exchange.

. On the preview screen you have several options to customize the generated code. You can change the filename, namespace, or choose asynchronous methods.

Also you can customize the location of the generated classes. Check the "Customize output folders" and enter the path for the controllers and/or the models. 
Select the check box if you want to add "generated.cs" to the model filenames.

A Contracts folder is added to the project containing the generated assets. These assets include a local copy of the RAML/OAS definition, the generated model classes (inferred from the RAML types or JSON schemas in the RAML/OAS definition), and .NET interfaces representing the contracts for the ASP.NET Controllers.

If you want to customize the location of the generated classes, select the "Customize output folders", specify the paths, and choose if you want to add ".generated.cs" suffix to the Models. **Specified paths will be relative to the project's root folder**.
If you leave these fields empty, it will place the generated controllers in the "Controllers" folder and the rest of the assets under the Contracts folder.

If you plan to host several versions of the API in the same solution, you can check the "Use api version" option. 
This will add the version as a prefix to routes, controllers, and models, thus preventing collision between different versions of the API.

image::docimages/RAML_NETAddRAMLContractScreen.png[align="center", width=550]



== Updating your RAML/OAS specification

The tool also supports updating the generated ASP.NET Core or Web API when a change is made to the RAML/OAS definition. This lets you keep the contract definition in a RAML/OAS file with the implementation, so that both stay in sync. The classes get re-generated when you save changes made to any the RAML files in your project. This only affects the existing .NET contract interfaces and adds ASP.NET Core or Web API controller implementations for any new resource in the RAML/OAS definition. The existing controller implementations remain untouched.

If new resources or methods have been added, the implementation controller won't match the interface. You will have to implement those methods manually.

In a similar fashion if changes are made to a resource or method and this produces changes in the signature of a method, the interface will be updated but the implementation not. You will have to manually update the signature (and the implementation code).

In the case of deletions the base controllers will no longer route to the implementation method, so it in this case is not absolutely necessary because it will still compile (obsolete implementation code should be removed manually).

In short, interfaces and base controllers will be updated automatically, but existing controller implementations are not changed so they must be updated or deleted manually.


== Implementing a Controller in ASP.NET Web API

The generated controllers provide the starting point for the implementation. The tool generates a class that implements the .NET interface or contract for the resource defined in RAML/OAS. The following example illustrates the controller Movies for the Movies RAML file:

[source, c#]
----
public partial class MoviesController : IMoviesController
{

    /// <summary>
    /// Gets all movies in the catalogue
    /// </summary>
    /// <returns>IList<MoviesGetOKResponseContent></returns>
    public IHttpActionResult Get()
    {
        // TODO: implement Get - route: movies/
        // var result = new IList<MoviesGetOKResponseContent>();
        // return Ok(result);
        return Ok();
    }

    /// <summary>
    /// Adds a movie to the catalog
    /// </summary>
    /// <param name="moviespostrequestcontent"></param>
    /// <param name="access_token">Sends a valid OAuth v2 access token. Do not use together with the &quot;Authorization&quot; header </param>
    public IHttpActionResult Post(Models.MoviesPostRequestContent moviespostrequestcontent,[FromUri] string access_token = null)
    {
        // TODO: implement Post - route: movies/
        return Ok();
    }

    /// <summary>
    /// Get the info of a movie
    /// </summary>
    /// <param name="id"></param>
    /// <returns>IdGetOKResponseContent</returns>
    public IHttpActionResult GetById([FromUri] string id)
    {
        // TODO: implement GetById - route: movies/{id}
        // var result = new IdGetOKResponseContent();
        // return Ok(result);
        return Ok();
    }

    /// <summary>
    /// Update the info of a movie
    /// </summary>
    /// <param name="idputrequestcontent"></param>
    /// <param name="id"></param>
    public IHttpActionResult Put(Models.IdPutRequestContent idputrequestcontent,[FromUri] string id)
    {
        // TODO: implement Put - route: movies/{id}
        return Ok();
    }

    /// <summary>
    /// Remove a movie from the catalog
    /// </summary>
    /// <param name="id"></param>
    public IHttpActionResult Delete([FromUri] string id)
    {
        // TODO: implement Delete - route: movies/{id}
        return Ok();
    }

    /// <summary>
    /// Rent a movie
    /// </summary>
    /// <param name="json"></param>
    /// <param name="id"></param>
    /// <param name="access_token">Sends a valid OAuth 2 access token. Do not use together with the &quot;Authorization&quot; header </param>
    public IHttpActionResult PutRent(string json,[FromUri] string id,[FromUri] string access_token = null)
    {
        // TODO: implement PutRent - route: movies/{id}/rent
        return Ok();
    }

    /// <summary>
    /// return a movie
    /// </summary>
    /// <param name="json"></param>
    /// <param name="id"></param>
    /// <param name="access_token">Sends a valid OAuth v2 access token. Do not use together with the &quot;Authorization&quot; header </param>
    public IHttpActionResult PutReturn(string json,[FromUri] string id,[FromUri] string access_token = null)
    {
        // TODO: implement PutReturn - route: movies/{id}/return
        return Ok();
    }

    /// <summary>
    /// gets the current user movies wishlist
    /// </summary>
    /// <param name="access_token">Sends a valid OAuth v2 access token. Do not use together with the &quot;Authorization&quot; header </param>
    /// <returns>IList<WishlistGetOKResponseContent></returns>
    public IHttpActionResult GetWishlist([FromUri] string access_token = null)
    {
        // TODO: implement GetWishlist - route: movies/wishlist
        // var result = new IList<WishlistGetOKResponseContent>();
        // return Ok(result);
        return Ok();
    }

    /// <summary>
    /// Add a movie to the current user movies wishlist
    /// </summary>
    /// <param name="json"></param>
    /// <param name="id"></param>
    /// <param name="access_token">Sends a valid OAuth 2 access token. Do not use together with the &quot;Authorization&quot; header </param>
    public IHttpActionResult PostById(string json,[FromUri] string id,[FromUri] string access_token = null)
    {
        // TODO: implement PostById - route: movies/wishlist/{id}
        return Ok();
    }

    /// <summary>
    /// Removes a movie from the current user movies wishlist
    /// </summary>
    /// <param name="id"></param>
    /// <param name="access_token">Sends a valid OAuth v2 access token. Do not use together with the &quot;Authorization&quot; header </param>
    public IHttpActionResult DeleteById([FromUri] string id,[FromUri] string access_token = null)
    {
        // TODO: implement DeleteById - route: movies/wishlist/{id}
        return Ok();
    }

    /// <summary>
    /// Gets the user rented movies
    /// </summary>
    /// <returns>IList<RentedGetOKResponseContent></returns>
    public IHttpActionResult GetRented()
    {
        // TODO: implement GetRented - route: movies/rented
        // var result = new IList<RentedGetOKResponseContent>();
        // return Ok(result);
        return Ok();
    }

    /// <summary>
    /// Get all movies that are not currently rented
    /// </summary>
    /// <returns>IList<AvailableGetOKResponseContent></returns>
    public IHttpActionResult GetAvailable()
    {
        // TODO: implement GetAvailable - route: movies/available
        // var result = new IList<AvailableGetOKResponseContent>();
        // return Ok(result);
        return Ok();
    }

}
----

The `IMoviesController` interface implemented by the controller represents the contract. You can provide, for example, the implementation code for the Get method and return a list of available movies in the catalog.


=== Advanced Scenarios

- link:CustomizingCodeGeneration.asciidoc[Customizing the Code Generation]